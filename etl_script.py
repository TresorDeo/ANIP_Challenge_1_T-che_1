{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-10-02T19:29:42.306902Z",
     "start_time": "2025-10-02T19:29:13.015068Z"
    }
   },
   "source": [
    "# ANIP Challenge 1 - Tâche 1 : ETL (Collecte, Nettoyage, Harmonisation)\n",
    "# Auteur : Déo-Gratias ZINGUEDE | Date : 2 Oct 2025\n",
    "#\n",
    "# Objectif\n",
    "# ------\n",
    "# Créer un dataset unifié croisé avec :\n",
    "# - Population par département (évolution annuelle)\n",
    "# - Female_labor_rate par an\n",
    "# - GDP et GDP per capita par an\n",
    "# - Indicateurs sociaux et sportifs\n",
    "# Prêt pour Power BI.\n",
    "#\n",
    "# Livrables :\n",
    "# - Dataset final nettoyé et harmonisé (CSV)\n",
    "# - Script Python (collecte, nettoyage, harmonisation)\n",
    "# - Glossaire des variables\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# CONFIGURATION\n",
    "BASE_PATH = r\"C:\\Users\\Toshiba\\Desktop\\Datas\"\n",
    "PATHS = {\n",
    "    'un_wpp': os.path.join(BASE_PATH, \"data_demo_un_wpp.csv\"),\n",
    "    'worldpop': os.path.join(BASE_PATH, \"pop_by_dept_and_commune_2020.csv\"),\n",
    "    'imf_weo': os.path.join(BASE_PATH, \"WEO.xlsx\"),\n",
    "    'unctad': os.path.join(BASE_PATH, \"unctad_benin.csv\"),\n",
    "    'undp_hdr': os.path.join(BASE_PATH, \"hdr-data.xlsx\"),\n",
    "    'who_gho': os.path.join(BASE_PATH, \"health_systems_indicators_ben.csv\"),\n",
    "    'gender_wb': os.path.join(BASE_PATH, \"API_SL.TLF.CACT.FE.ZS_DS2_en_csv_v2_1071934\",\n",
    "                              \"API_SL.TLF.CACT.FE.ZS_DS2_en_csv_v2_1071934.csv\"),\n",
    "    'sport': os.path.join(BASE_PATH, \"Sport_data.xlsx\")\n",
    "}\n",
    "\n",
    "departements_benin = [\n",
    "    'Atlantique', 'Littoral', 'Oueme', 'Plateau', 'Zou',\n",
    "    'Mono', 'Atacora', 'Alibori', 'Borgou', 'Collines', 'Donga', 'Couffo'\n",
    "]\n",
    "\n",
    "# MODULES DE COLLECTE\n",
    "def collect_un_wpp(filepath):\n",
    "    df = pd.read_csv(filepath, encoding=\"utf-8\")\n",
    "    df.columns = df.columns.str.strip()\n",
    "\n",
    "    # Chercher colonne pays\n",
    "    possible_cols = [\"Region\", \"region\", \"Country\", \"country\", \"country or area\"]\n",
    "    col_region = next((c for c in possible_cols if c in df.columns), None)\n",
    "    if not col_region:\n",
    "        raise ValueError(f\"Colonne pays/région introuvable dans {df.columns.tolist()}\")\n",
    "\n",
    "    # Filtrer Bénin\n",
    "    df_benin = df[df[col_region] == \"Benin\"].copy()\n",
    "\n",
    "    # Format long\n",
    "    df_long = df_benin.melt(\n",
    "        id_vars=[col_region, \"Year\", \"Source\"],\n",
    "        value_vars=[\n",
    "            \"Total Population (thousands)\",\n",
    "            \"Male Population (thousands)\",\n",
    "            \"Female Population (thousands)\",\n",
    "            \"Life Expectancy at Birth(years)\",\n",
    "            \"Infant Mortality Rate (per 1000 live births)\",\n",
    "            \"Total Fertility Rate (live births per woman)\"\n",
    "        ],\n",
    "        var_name=\"Indicator\",\n",
    "        value_name=\"Value\"\n",
    "    )\n",
    "\n",
    "    rename_dict = {\n",
    "        \"Total Population (thousands)\": \"population_total\",\n",
    "        \"Male Population (thousands)\": \"population_male\",\n",
    "        \"Female Population (thousands)\": \"population_female\",\n",
    "        \"Life Expectancy at Birth(years)\": \"life_expectancy\",\n",
    "        \"Infant Mortality Rate (per 1000 live births)\": \"infant_mortality\",\n",
    "        \"Total Fertility Rate (live births per woman)\": \"fertility_rate\"\n",
    "    }\n",
    "    df_long[\"Indicator\"] = df_long[\"Indicator\"].replace(rename_dict)\n",
    "    df_long[\"Region\"] = \"National\"\n",
    "    df_long[\"Commune\"] = \"N/A\"\n",
    "\n",
    "    return df_long[[\"Year\", \"Indicator\", \"Value\", \"Source\", \"Region\", \"Commune\"]]\n",
    "\n",
    "\n",
    "def collect_worldpop(filepath_csv):\n",
    "    try:\n",
    "        df = pd.read_csv(filepath_csv)\n",
    "        df['Year'] = 2020\n",
    "        df['Region'] = df['Departement'].str.title()\n",
    "        df['Source'] = 'WorldPop'\n",
    "        df['Indicator'] = \"population_by_commune\"\n",
    "        return df[['Year', 'Indicator', 'Population', 'Source', 'Region', 'Commune']]\\\n",
    "            .rename(columns={'Population': 'Value'})\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur WorldPop : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_imf_weo(filepath_excel):\n",
    "    try:\n",
    "        df = pd.read_excel(filepath_excel, sheet_name=0)\n",
    "        df_benin = df[df['Country'] == 'Benin'].copy()\n",
    "        year_cols = [c for c in df_benin.columns if str(c).isdigit()]\n",
    "\n",
    "        records = []\n",
    "        for indicator, unit, label in [\n",
    "            ('Gross domestic product, current prices', 'U.S. dollars', 'gdp'),\n",
    "            ('Population', 'Persons', 'population')\n",
    "        ]:\n",
    "            sub = df_benin[(df_benin['Subject Descriptor'] == indicator) &\n",
    "                           (df_benin['Units'] == unit)].copy()\n",
    "            melted = sub.melt(id_vars=['Country'], value_vars=year_cols,\n",
    "                              var_name='Year', value_name='Value')\n",
    "            melted['Year'] = pd.to_numeric(melted['Year'], errors='coerce')\n",
    "            melted['Value'] = pd.to_numeric(melted['Value'], errors='coerce')\n",
    "            if label == \"gdp\":\n",
    "                melted['Value'] = melted['Value'] * 1_000_000_000\n",
    "            elif label == \"population\":\n",
    "                melted['Value'] = melted['Value'] * 1_000_000\n",
    "            melted['Indicator'] = label\n",
    "            melted['Source'] = 'IMF WEO'\n",
    "            melted['Region'] = 'National'\n",
    "            melted['Commune'] = 'N/A'\n",
    "            records.append(melted[['Year', 'Indicator', 'Value', 'Source', 'Region', 'Commune']])\n",
    "\n",
    "        # GDP per capita\n",
    "        gdp = records[0].set_index(\"Year\")[\"Value\"]\n",
    "        pop = records[1].set_index(\"Year\")[\"Value\"]\n",
    "        gdp_pc = (gdp / pop).reset_index()\n",
    "        gdp_pc.columns = [\"Year\", \"Value\"]\n",
    "        gdp_pc[\"Indicator\"] = \"gdp_per_capita\"\n",
    "        gdp_pc[\"Source\"] = \"IMF WEO\"\n",
    "        gdp_pc[\"Region\"] = \"National\"\n",
    "        gdp_pc[\"Commune\"] = \"N/A\"\n",
    "        records.append(gdp_pc[[\"Year\", \"Indicator\", \"Value\", \"Source\", \"Region\", \"Commune\"]])\n",
    "\n",
    "        return pd.concat(records, ignore_index=True)\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur IMF WEO : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_unctad(filepath_csv):\n",
    "    try:\n",
    "        df = pd.read_csv(filepath_csv)\n",
    "        df = df[(df['Year'] >= 2010) & (df['Year'] <= 2023)].copy()\n",
    "        df['Region'] = 'National'\n",
    "        df['Commune'] = 'N/A'\n",
    "        df['Source'] = 'UNCTAD'\n",
    "        df_long = df.melt(\n",
    "            id_vars=['Year', 'Source', 'Region', 'Commune'],\n",
    "            value_vars=['Merchandise_Exports_million_USD', 'Merchandise_Imports_million_USD',\n",
    "                        'GDP_million_USD', 'GDP_per_capita_USD', 'Real_GDP_Growth_percent'],\n",
    "            var_name=\"Indicator\",\n",
    "            value_name=\"Value\"\n",
    "        )\n",
    "        df_long[\"Indicator\"] = df_long[\"Indicator\"].str.lower()\n",
    "        return df_long\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur UNCTAD : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_undp_hdr(filepath_excel):\n",
    "    try:\n",
    "        df = pd.read_excel(filepath_excel)\n",
    "        df_benin = df[df['country'].str.strip().str.lower() == 'benin'].copy()\n",
    "        df_benin.loc[:, 'Region'] = 'National'\n",
    "        df_benin.loc[:, 'Commune'] = 'N/A'\n",
    "        df_benin.loc[:, 'Source'] = 'UNDP HDR'\n",
    "\n",
    "        return df_benin.rename(columns={'year': 'Year', 'indicator': 'Indicator', 'value': 'Value'})[\n",
    "            ['Year', 'Indicator', 'Value', 'Source', 'Region', 'Commune']\n",
    "        ]\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur UNDP HDR : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_who_gho(filepath_csv):\n",
    "    try:\n",
    "        df = pd.read_csv(filepath_csv)\n",
    "        df_benin = df[df['COUNTRY (DISPLAY)'] == 'Benin'].copy()\n",
    "        df_benin = df_benin[df_benin['GHO (DISPLAY)'].str.contains('Care-seeking', case=False, na=False)].copy()\n",
    "\n",
    "        df_benin = df_benin[['YEAR (DISPLAY)', 'Numeric']].rename(\n",
    "            columns={'YEAR (DISPLAY)': 'Year', 'Numeric': 'Value'}\n",
    "        )\n",
    "        df_benin.loc[:, 'Indicator'] = 'care_seeking_rate'\n",
    "        df_benin.loc[:, 'Source'] = 'WHO GHO'\n",
    "        df_benin.loc[:, 'Region'] = 'National'\n",
    "        df_benin.loc[:, 'Commune'] = 'N/A'\n",
    "\n",
    "        return df_benin[['Year', 'Indicator', 'Value', 'Source', 'Region', 'Commune']]\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur WHO GHO : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_gender_wb(filepath_csv):\n",
    "    try:\n",
    "        df = pd.read_csv(filepath_csv, skiprows=4)\n",
    "        df_benin = df[df['Country Name'] == 'Benin'].copy()\n",
    "        year_cols = [str(y) for y in range(2010, 2024)]\n",
    "        df_melt = df_benin.melt(id_vars=['Country Name'],\n",
    "                                value_vars=year_cols,\n",
    "                                var_name='Year',\n",
    "                                value_name='Value')\n",
    "        df_melt['Indicator'] = \"female_labor_rate\"\n",
    "        df_melt['Source'] = 'Gender WB'\n",
    "        df_melt['Region'] = 'National'\n",
    "        df_melt['Commune'] = 'N/A'\n",
    "        return df_melt[['Year', 'Indicator', 'Value', 'Source', 'Region', 'Commune']]\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur Gender WB : {e}\")\n",
    "        return None\n",
    "\n",
    "\n",
    "def collect_sport_data(filepath_excel):\n",
    "    try:\n",
    "        df = pd.read_excel(filepath_excel)\n",
    "        expected_cols = ['Year', 'Indicator', 'Value', 'Source', 'Region']\n",
    "        if not all(col in df.columns for col in expected_cols):\n",
    "            raise ValueError(\" Les colonnes du fichier sport_data ne correspondent pas au format attendu.\")\n",
    "\n",
    "        df = df.copy()\n",
    "        df['Commune'] = 'N/A'\n",
    "        df['Indicator'] = df['Indicator'].str.lower()\n",
    "\n",
    "        return df[['Year', 'Indicator', 'Value', 'Source', 'Region', 'Commune']]\n",
    "    except Exception as e:\n",
    "        print(f\" Erreur Sport Data : {e}\")\n",
    "        return None\n",
    "\n",
    "# NETTOYAGE & UNIFICATION\n",
    "def clean_harmonize(df):\n",
    "    if df is None or df.empty:\n",
    "        return None\n",
    "    df = df.copy()\n",
    "    df['Year'] = pd.to_numeric(df['Year'], errors='coerce')\n",
    "    df['Value'] = pd.to_numeric(df['Value'], errors='coerce')\n",
    "    df = df.dropna(subset=['Year', 'Value'])\n",
    "    df['Year'] = df['Year'].astype(int)\n",
    "    return df[(df['Year'] >= 2010) & (df['Year'] <= 2023)]\n",
    "\n",
    "# EXECUTION\n",
    "datasets = [\n",
    "    collect_un_wpp(PATHS['un_wpp']),\n",
    "    collect_worldpop(PATHS['worldpop']),\n",
    "    collect_imf_weo(PATHS['imf_weo']),\n",
    "    collect_unctad(PATHS['unctad']),\n",
    "    collect_undp_hdr(PATHS['undp_hdr']),\n",
    "    collect_who_gho(PATHS['who_gho']),\n",
    "    collect_gender_wb(PATHS['gender_wb']),\n",
    "    collect_sport_data(PATHS['sport'])\n",
    "]\n",
    "\n",
    "datasets_clean = [clean_harmonize(df) for df in datasets if df is not None]\n",
    "\n",
    "if datasets_clean:\n",
    "    df_unified = pd.concat(datasets_clean, ignore_index=True)\n",
    "    output_path = os.path.join(BASE_PATH, \"dataset_final_unifie.csv\")\n",
    "    df_unified.to_csv(output_path, index=False, encoding='utf-8-sig')\n",
    "    print(\" Dataset sauvegardé :\", output_path)\n",
    "else:\n",
    "    print(\" Aucun dataset valide à concaténer.\")\n",
    "\n",
    "# --- Module 5 : Glossaire amélioré\n",
    "glossaire = {\n",
    "    #  Population & Santé\n",
    "    'population': {\n",
    "        'def': 'Population totale',\n",
    "        'unite': 'Habitants',\n",
    "        'source': 'UN WPP / WorldPop',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National / Départements / Communes',\n",
    "        'theme': 'Population & Santé',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'life_expectancy': {\n",
    "        'def': 'Espérance de vie à la naissance',\n",
    "        'unite': 'Années',\n",
    "        'source': 'UN WPP',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Population & Santé',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'infant_mortality': {\n",
    "        'def': 'Mortalité infantile',\n",
    "        'unite': 'Pour 1000 naissances',\n",
    "        'source': 'UN WPP',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Population & Santé',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'fertility_rate': {\n",
    "        'def': 'Taux de fertilité',\n",
    "        'unite': 'Naissances par femme',\n",
    "        'source': 'UN WPP',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Population & Santé',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'care_seeking_rate': {\n",
    "        'def': 'Taux de recherche de soins pour enfants',\n",
    "        'unite': '%',\n",
    "        'source': 'WHO GHO',\n",
    "        'periode': '2017',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Population & Santé',\n",
    "        'frequence': 'Ponctuel'\n",
    "    },\n",
    "\n",
    "    # --- Économie & Commerce\n",
    "    'gdp': {\n",
    "        'def': 'Produit Intérieur Brut (PIB)',\n",
    "        'unite': 'Million USD',\n",
    "        'source': 'IMF WEO',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Économie & Commerce',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'gdp_per_capita': {\n",
    "        'def': 'PIB par habitant',\n",
    "        'unite': 'USD',\n",
    "        'source': 'IMF WEO',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Économie & Commerce',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'merchandise_exports': {\n",
    "        'def': 'Exportations de marchandises',\n",
    "        'unite': 'Million USD',\n",
    "        'source': 'UNCTAD',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Économie & Commerce',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'merchandise_imports': {\n",
    "        'def': 'Importations de marchandises',\n",
    "        'unite': 'Million USD',\n",
    "        'source': 'UNCTAD',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Économie & Commerce',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "\n",
    "    # --- Développement humain & social\n",
    "    'hdi': {\n",
    "        'def': 'Indice de développement humain',\n",
    "        'unite': 'Index (0-1)',\n",
    "        'source': 'UNDP HDR',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Développement humain & social',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'mean_years_schooling': {\n",
    "        'def': 'Années moyennes de scolarité',\n",
    "        'unite': 'Années',\n",
    "        'source': 'UNDP HDR',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Développement humain & social',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "    'female_labor_rate': {\n",
    "        'def': 'Taux de participation des femmes au marché du travail',\n",
    "        'unite': '%',\n",
    "        'source': 'World Bank Gender',\n",
    "        'periode': '2010-2023',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Développement humain & social',\n",
    "        'frequence': 'Annuel'\n",
    "    },\n",
    "\n",
    "    # --- Sport\n",
    "    'sport_fifa_ranking': {\n",
    "        'def': 'Classement FIFA du Bénin',\n",
    "        'unite': 'Rang',\n",
    "        'source': 'FIFA',\n",
    "        'periode': '2010',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Sport',\n",
    "        'frequence': 'Ponctuel'\n",
    "    },\n",
    "    'sport_olympic_athletes': {\n",
    "        'def': 'Nombre d’athlètes béninois aux Jeux Olympiques',\n",
    "        'unite': 'Athlètes',\n",
    "        'source': 'IOC',\n",
    "        'periode': '2012',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Sport',\n",
    "        'frequence': 'Ponctuel'\n",
    "    },\n",
    "    'sport_afcon_matches': {\n",
    "        'def': 'Nombre de matchs joués par le Bénin en phase finale de la CAN',\n",
    "        'unite': 'Matchs',\n",
    "        'source': 'CAF',\n",
    "        'periode': '2019',\n",
    "        'geo': 'National',\n",
    "        'theme': 'Sport',\n",
    "        'frequence': 'Ponctuel'\n",
    "    }\n",
    "}\n",
    "\n",
    "# Sauvegarde en CSV\n",
    "glossaire_df = pd.DataFrame.from_dict(glossaire, orient='index')\n",
    "glossaire_path = os.path.join(BASE_PATH, \"glossaire.csv\")\n",
    "glossaire_df.to_csv(glossaire_path, index=True, index_label='Variable', encoding='utf-8-sig')\n",
    "\n",
    "print(f\" Glossaire sauvegardé : {glossaire_path}\")\n"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Dataset sauvegardé : C:\\Users\\Toshiba\\Desktop\\Datas\\dataset_final_unifie.csv\n",
      " Glossaire sauvegardé : C:\\Users\\Toshiba\\Desktop\\Datas\\glossaire.csv\n"
     ]
    }
   ],
   "execution_count": 2
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "",
   "id": "1df2da02c5c62eac"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
